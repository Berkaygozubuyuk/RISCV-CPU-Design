$date
	Sun May 04 22:01:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module CPU_tb $end
$var wire 32 ! rd_out [31:0] $end
$var reg 1 " clk $end
$var reg 32 # instr [31:0] $end
$var reg 1 $ rst $end
$scope module dut $end
$var wire 1 % MemRead $end
$var wire 1 & MemToReg $end
$var wire 1 ' MemWrite $end
$var wire 1 " clk $end
$var wire 32 ( instr [31:0] $end
$var wire 32 ) rd_out [31:0] $end
$var wire 1 $ rst $end
$var wire 32 * wb_data [31:0] $end
$var wire 32 + rd2 [31:0] $end
$var wire 32 , rd1 [31:0] $end
$var wire 32 - imm [31:0] $end
$var wire 32 . alu_out [31:0] $end
$var wire 1 / RegWrite $end
$var wire 4 0 ALUctr [3:0] $end
$var wire 1 1 ALUSrc $end
$var wire 2 2 ALUOp [1:0] $end
$scope module alu $end
$var wire 32 3 A [31:0] $end
$var wire 32 4 B [31:0] $end
$var wire 4 5 ALUctr [3:0] $end
$var reg 32 6 Result [31:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 3 7 funct3 [2:0] $end
$var wire 2 8 ALUOp [1:0] $end
$var reg 4 9 ALUctr [3:0] $end
$upscope $end
$scope module ctrl $end
$var wire 1 1 ALUSrc $end
$var wire 1 % MemRead $end
$var wire 1 & MemToReg $end
$var wire 1 ' MemWrite $end
$var wire 1 / RegWrite $end
$var wire 7 : opcode [6:0] $end
$var wire 1 ; is_LUI $end
$var wire 2 < ALUOp [1:0] $end
$upscope $end
$scope module immgen $end
$var wire 32 = instr [31:0] $end
$var reg 32 > imm32 [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 " clk $end
$var wire 5 ? ra1 [4:0] $end
$var wire 5 @ ra2 [4:0] $end
$var wire 5 A wa [4:0] $end
$var wire 32 B wd [31:0] $end
$var wire 1 / we $end
$var reg 32 C rd1 [31:0] $end
$var reg 32 D rd2 [31:0] $end
$var integer 32 E i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100000 E
bx D
bx C
b0 B
bx A
bx @
bx ?
bx >
bx =
b0x <
x;
bx :
b0 9
b0x 8
bx 7
b0 6
b0 5
bx 4
b0 3
b0x 2
x1
b0 0
x/
b0 .
bx -
bx ,
bx +
b0 *
bx )
bx (
0'
0&
0%
1$
bx #
0"
bx !
$end
#5000
1"
#10000
0"
0$
#15000
1"
#20000
b10101011110011011110000000000000 *
b10101011110011011110000000000000 B
b10101011110011011110000000000000 .
b10101011110011011110000000000000 6
b1010 0
b1010 5
b1010 9
b1 2
b1 8
b1 <
b0 +
b0 D
b0 ,
b0 C
b10101011110011011110000000000000 4
11
1/
1;
b110111 :
b110 7
b11011 ?
b11100 @
b101 A
b0 !
b0 )
b10101011110011011110000000000000 -
b10101011110011011110000000000000 >
0"
b10101011110011011110001010110111 #
b10101011110011011110001010110111 (
b10101011110011011110001010110111 =
#25000
b10101011110011011110000000000000 !
b10101011110011011110000000000000 )
1"
#30000
0"
#35000
1"
#40000
0"
#45000
1"
#50000
0"
#55000
1"
#60000
0"
#65000
1"
#70000
0"
